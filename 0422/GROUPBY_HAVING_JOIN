
DBMS
--SQL
--DDL/ DML/DCL/TCL

DML SELECT/ INSERT/ UPDATE/ DELETE
SELECT: 조회 문법
-- WHERE/ LIEK, NOT LIKE/ IS NULL, IS NOT NULL/ IN, NOT IN/ BETWEEN AND
-- ORDER BY[ASC,DESC]
-- INSTR, LENGTH/LENGTHB/TO_CHAR/TO_DATE/FLOOR/CEIL/ROUND/TRUNC
    SYSDATE, LOCALTIMESTAMP, ADD MONTHS, EXTRACT, MONTHS BETWEEN, SUBSTR...



-- GROUP BY / HAVING
--JOIN
--UNION
--SUBQUERY

----------------------------------------------------------------------------
[순서]
SELECT FROM WHERE GROUP BY HAVING ORDER BY



group by
- group 은 특정 칼럼을 기준으로 집계를 내는데 사용된다.
- 형식
SELECT [GROUP BY 절에 지정된 컬럼1][GROUP BY 별로 집계할 값]
FROM [테이블 명]
GROUP BY[그룹으로 묶을 컬럼]


select dept_code, sum(salary) 
from employee
group by dept_code;
--> 그룹화 할 경우 그룹화된 정보만 가져올 수 있다.

-- 회사내 직원의 성별 별 인원 수
select
    decode()

having
- Having 절은 Group by로 집계된 값 중 where 절 처럼 특정 조건을 추가
- 형식
SELECT [GROUP BY 절에 지정된 컬럼1][GROUP BY별로 집계할 값]
FROM [테이블 명]
GROUP BY[그룹으로 묶을 컬럼 값]
HAVING [조건 추가];

--부서별 급여 평균을 구했을 때 , 급여 평균이 300만원 이상인 부서의 정보만 출력
select
    dept_code,
    avg(salary)
from employee
where avg(salary)>= 3000000//에러
> 에러나는 이유
1. where 절에는 그룹함수를 사용할 수 없다.
2. 쿼리의 실행 순서 때문
* 쿼리 실행 순서

from -> where(그룹화 이전 데이터 전체에 대하여 적용될 조건)->group by
-> having(그룹화 된 데이터에 대하여 적용될 조건)->select->order by
    - select 에서 만든 alias는 where 절에서 사용할 수 없다.(실행순서 때문에)
    - select 에서 만든 alias는 order by에서는 사용할 수 있다.

------------------------------------------------------------------
join: 한 개 이상의 테이블을 병합해 유의미 한 데이터셋을 만들어내는 문법
참고자료
https://hongong.hanbit.co.kr/sql-%EA%B8%B0%EB%B3%B8-%EB%AC%B8%EB%B2%95-joininner-outer-cross-self-join/

1. cross join: join의 동작 원리를 이해하기 쉬운 join 종류( 실전 개발에서는 쓰임이 드뭄)
select*from job; --7개행
select*from department; --9행
select*from department cross join job; --7x9행

    - 한쪽 테이블의 모든 행과 다른 쪽 테이블의 모든 행을 조인하는 기능

2. inner join : 여러 테이블 간에 특정 조건을 기반으로 병합하는 문법  -  null 미포함
    -     - 두 테이블을 조인할 떄, 두 테이블에 모두 지정한 열의 데이터가 있어야 함.

3. outer join : 여러 테이블 간에 특정 조인을 기반으로 병합하는 문법  - null 포함
    - 두 테이블을 조인할 때, 1개의 테이블에만 데이터가 있어도 결과가 나온다.

    LEFT OUTER JOIN : 왼 쪽 테이블의 모든 값이 출력되는 조인
    RIGHT OUTER JOIN : 오른쪽 테이블의 모든 값이 출력되는 조인
    FULL OUTER JOIN : 왼쪽 또는 오른쪽 테이블의 모든 값이 출력되는 조인


4. self join : 한 개의 테이블을 join하는 문법 - 특수한 경우에 간혹 사용됨
    - 자신이 자신과 조인한다는 의미로 1개의 테이블을 사용한다.
5. 다중 join: 3개 이상의 여러 테이블의 join

